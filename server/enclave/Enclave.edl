// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

enclave {
    from "sgx_tstd.edl" import *;
    from "sgx_stdio.edl" import *;
    from "sgx_backtrace.edl" import *;
    from "sgx_tprotected_fs.edl" import *;
    from "sgx_fs.edl" import *;
    from "sgx_tstdc.edl" import *;
    from "sgx_file.edl" import *;
    from "sgx_env.edl" import *;
    from "sgx_net.edl" import *;
    include "sgx_report.h"

    trusted {
        /* define ECALLs here. */

        public sgx_status_t init_tee();
        public sgx_status_t get_access_token(
            [in, size = id_token_len] const uint8_t *id_token,
            size_t id_token_len,
            [out, size = max_token_len] uint8_t *access_token,
            size_t max_token_len,
            [out] size_t* access_token_len
        );
        public sgx_status_t get_tee_jwks(
            [out, size = max_jwks_len] uint8_t *tee_jwks,
            size_t max_jwks_len,
            [out] size_t* tee_jwks_len
        );
    };

    untrusted {
        sgx_status_t ocall_get_target_info([out] sgx_target_info_t *ti);
        
        sgx_status_t ocall_generate_quote(
            [in] sgx_report_t *p_report,
            [out, size = max_quote_len] uint8_t *p_quote,
            uint32_t max_quote_len,
            [out] uint32_t* p_quote_len
        );

        sgx_status_t ocall_read_file(
            [in, size = path_len] const uint8_t *path,
            size_t path_len,
            [out, size = max_content_len] uint8_t *file_content, 
            size_t max_content_len, 
            [out] size_t* content_len
        );
    };
};
